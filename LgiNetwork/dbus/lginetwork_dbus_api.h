/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __LGINETWORK_DBUS_API_H__
#define __LGINETWORK_DBUS_API_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.lgi.rdk.utils.networkconfig1 */

#define TYPE_NETWORKCONFIG1 (networkconfig1_get_type ())
#define NETWORKCONFIG1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_NETWORKCONFIG1, Networkconfig1))
#define IS_NETWORKCONFIG1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_NETWORKCONFIG1))
#define NETWORKCONFIG1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_NETWORKCONFIG1, Networkconfig1Iface))

struct _Networkconfig1;
typedef struct _Networkconfig1 Networkconfig1;
typedef struct _Networkconfig1Iface Networkconfig1Iface;

struct _Networkconfig1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_dhcprenew) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_enable) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id,
    gboolean arg_enable);

  gboolean (*handle_get_active_interface) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_interfaces) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_param) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id,
    const gchar *arg_paramName);

  gboolean (*handle_get_params) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_get_status) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_is_enabled) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_reset_configuration) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_send_wake_up_request) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_mac);

  gboolean (*handle_set_active_interface) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id);

  gboolean (*handle_set_param) (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_id,
    const gchar *arg_paramName,
    const gchar *arg_paramValue);

  void (*ipv4_configuration_changed) (
    Networkconfig1 *object,
    const gchar *arg_id);

  void (*ipv6_configuration_changed) (
    Networkconfig1 *object,
    const gchar *arg_id);

  void (*network_configuration_service_started) (
    Networkconfig1 *object);

  void (*networking_event) (
    Networkconfig1 *object,
    const gchar *arg_id,
    const gchar *arg_event,
    guint arg_count,
    GVariant *arg_params);

  void (*status_changed) (
    Networkconfig1 *object,
    const gchar *arg_id,
    const gchar *arg_ifaceStatus);

};

GType networkconfig1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *networkconfig1_interface_info (void);
guint networkconfig1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void networkconfig1_complete_get_interfaces (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    guint count,
    const gchar *const *ids);

void networkconfig1_complete_enable (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status);

void networkconfig1_complete_is_enabled (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status,
    gboolean enabled);

void networkconfig1_complete_get_active_interface (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *id,
    gint status);

void networkconfig1_complete_set_active_interface (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status);

void networkconfig1_complete_get_params (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status,
    guint count,
    GVariant *params);

void networkconfig1_complete_get_param (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status,
    const gchar *paramValue);

void networkconfig1_complete_set_param (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status);

void networkconfig1_complete_dhcprenew (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status);

void networkconfig1_complete_get_status (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status,
    const gchar *ifaceStatus);

void networkconfig1_complete_reset_configuration (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status);

void networkconfig1_complete_send_wake_up_request (
    Networkconfig1 *object,
    GDBusMethodInvocation *invocation,
    gint status);



/* D-Bus signal emissions functions: */
void networkconfig1_emit_network_configuration_service_started (
    Networkconfig1 *object);

void networkconfig1_emit_ipv4_configuration_changed (
    Networkconfig1 *object,
    const gchar *arg_id);

void networkconfig1_emit_ipv6_configuration_changed (
    Networkconfig1 *object,
    const gchar *arg_id);

void networkconfig1_emit_status_changed (
    Networkconfig1 *object,
    const gchar *arg_id,
    const gchar *arg_ifaceStatus);

void networkconfig1_emit_networking_event (
    Networkconfig1 *object,
    const gchar *arg_id,
    const gchar *arg_event,
    guint arg_count,
    GVariant *arg_params);



/* D-Bus method calls: */
void networkconfig1_call_get_interfaces (
    Networkconfig1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_get_interfaces_finish (
    Networkconfig1 *proxy,
    guint *out_count,
    gchar ***out_ids,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_get_interfaces_sync (
    Networkconfig1 *proxy,
    guint *out_count,
    gchar ***out_ids,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_enable (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    gboolean arg_enable,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_enable_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_enable_sync (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    gboolean arg_enable,
    gint *out_status,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_is_enabled (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_is_enabled_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    gboolean *out_enabled,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_is_enabled_sync (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    gint *out_status,
    gboolean *out_enabled,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_get_active_interface (
    Networkconfig1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_get_active_interface_finish (
    Networkconfig1 *proxy,
    gchar **out_id,
    gint *out_status,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_get_active_interface_sync (
    Networkconfig1 *proxy,
    gchar **out_id,
    gint *out_status,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_set_active_interface (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_set_active_interface_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_set_active_interface_sync (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    gint *out_status,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_get_params (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_get_params_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    guint *out_count,
    GVariant **out_params,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_get_params_sync (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    gint *out_status,
    guint *out_count,
    GVariant **out_params,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_get_param (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    const gchar *arg_paramName,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_get_param_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    gchar **out_paramValue,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_get_param_sync (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    const gchar *arg_paramName,
    gint *out_status,
    gchar **out_paramValue,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_set_param (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    const gchar *arg_paramName,
    const gchar *arg_paramValue,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_set_param_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_set_param_sync (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    const gchar *arg_paramName,
    const gchar *arg_paramValue,
    gint *out_status,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_dhcprenew (
    Networkconfig1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_dhcprenew_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_dhcprenew_sync (
    Networkconfig1 *proxy,
    gint *out_status,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_get_status (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_get_status_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    gchar **out_ifaceStatus,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_get_status_sync (
    Networkconfig1 *proxy,
    const gchar *arg_id,
    gint *out_status,
    gchar **out_ifaceStatus,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_reset_configuration (
    Networkconfig1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_reset_configuration_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_reset_configuration_sync (
    Networkconfig1 *proxy,
    gint *out_status,
    GCancellable *cancellable,
    GError **error);

void networkconfig1_call_send_wake_up_request (
    Networkconfig1 *proxy,
    const gchar *arg_mac,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean networkconfig1_call_send_wake_up_request_finish (
    Networkconfig1 *proxy,
    gint *out_status,
    GAsyncResult *res,
    GError **error);

gboolean networkconfig1_call_send_wake_up_request_sync (
    Networkconfig1 *proxy,
    const gchar *arg_mac,
    gint *out_status,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_NETWORKCONFIG1_PROXY (networkconfig1_proxy_get_type ())
#define NETWORKCONFIG1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_NETWORKCONFIG1_PROXY, Networkconfig1Proxy))
#define NETWORKCONFIG1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_NETWORKCONFIG1_PROXY, Networkconfig1ProxyClass))
#define NETWORKCONFIG1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_NETWORKCONFIG1_PROXY, Networkconfig1ProxyClass))
#define IS_NETWORKCONFIG1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_NETWORKCONFIG1_PROXY))
#define IS_NETWORKCONFIG1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_NETWORKCONFIG1_PROXY))

typedef struct _Networkconfig1Proxy Networkconfig1Proxy;
typedef struct _Networkconfig1ProxyClass Networkconfig1ProxyClass;
typedef struct _Networkconfig1ProxyPrivate Networkconfig1ProxyPrivate;

struct _Networkconfig1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Networkconfig1ProxyPrivate *priv;
};

struct _Networkconfig1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType networkconfig1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Networkconfig1Proxy, g_object_unref)
#endif

void networkconfig1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Networkconfig1 *networkconfig1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Networkconfig1 *networkconfig1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void networkconfig1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Networkconfig1 *networkconfig1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Networkconfig1 *networkconfig1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_NETWORKCONFIG1_SKELETON (networkconfig1_skeleton_get_type ())
#define NETWORKCONFIG1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_NETWORKCONFIG1_SKELETON, Networkconfig1Skeleton))
#define NETWORKCONFIG1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_NETWORKCONFIG1_SKELETON, Networkconfig1SkeletonClass))
#define NETWORKCONFIG1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_NETWORKCONFIG1_SKELETON, Networkconfig1SkeletonClass))
#define IS_NETWORKCONFIG1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_NETWORKCONFIG1_SKELETON))
#define IS_NETWORKCONFIG1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_NETWORKCONFIG1_SKELETON))

typedef struct _Networkconfig1Skeleton Networkconfig1Skeleton;
typedef struct _Networkconfig1SkeletonClass Networkconfig1SkeletonClass;
typedef struct _Networkconfig1SkeletonPrivate Networkconfig1SkeletonPrivate;

struct _Networkconfig1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Networkconfig1SkeletonPrivate *priv;
};

struct _Networkconfig1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType networkconfig1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Networkconfig1Skeleton, g_object_unref)
#endif

Networkconfig1 *networkconfig1_skeleton_new (void);


G_END_DECLS

#endif /* __LGINETWORK_DBUS_API_H__ */
